I"n<p>当用户点击了App图标，到能够看到App主界面内容为止，在这个过程中应用做了那些事情呢？这些事情是否可以优化从而提高启动速度呢？下面我们将会讨论以上问题。</p>

<h3 id="main之前">main()之前</h3>

<p>在调用<code class="highlighter-rouge">main()</code>函数之前，基本所有工作都是由操作系统完成的，开发者能够插手的地方不多，多以如果想要想要优化这段时间，就必须了解，操作系统在<code class="highlighter-rouge">main()</code>之前做了什么。</p>

<p><code class="highlighter-rouge">main()</code>之前操作系统所做的工作是把可执行文件（Mach-O格式）加载到内存空间，然后动态链接库dyld，再执行一系列动态链接操作和初始化操作的过程（加载、绑定。及初始化）。</p>

<h4 id="加载过程从exec到main">加载过程—从exec()到main()</h4>

<p><img src="https://raw.githubusercontent.com/limeng99/limeng99.github.io/master/assets/img/screenshots/main-load.png" alt="main-load" /></p>

<ul>
  <li>exec()是一个系统调用</li>
  <li>App对应的可执行文件加载到内存</li>
  <li>把Dyld加载到内存中</li>
  <li>Dyld从主执行文件的header获取到需要加载的所依赖动态库列表，然后它需要找到每个dylib，而用所依赖的dylib文件可能会再依赖其他dylib，所以所需要加载的是动态库列表的一个递归依赖集合</li>
  <li>Rebase和Bind
    <ul>
      <li>Rebase在Image内部调整指针的指向。在过去会把动态库加载到指定地址，所有指针和数据对于代码都是对的，而现在地址空间布局是随机化，所以需要在原来的地址根据随机的偏移量做一下修正</li>
      <li>Bind是吧指针正确地指向Image外部的内容。这些指向外部的指针被符号(symbol)名称绑定，Dyld需要去符号表里查找，找到symbol对应的实现。</li>
    </ul>
  </li>
  <li>Objc
    <ul>
      <li>注册Objc类（class registration）</li>
      <li>把category的定义插入方法列表（category registration）</li>
    </ul>
  </li>
</ul>
:ET