I"  <h3 id="一homebrew安装">一、Homebrew安装</h3>

<p>Linux上的<code class="highlighter-rouge">yum</code>工具特别方便，Mac上也有一个类似的工具<code class="highlighter-rouge">Homebrew</code>。<code class="highlighter-rouge">Homebrew</code>是一个软件包管理器，官网地址<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a>。</p>

<ul>
  <li>安装方法：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre></div>    </div>
    <p>安装完<code class="highlighter-rouge">Homebrew</code>，就可以很方便的配置下面的环境了。</p>
  </li>
</ul>

<h3 id="二配置ruby环境">二、配置Ruby环境</h3>

<p><code class="highlighter-rouge">ruby</code> 是一种面向对象的脚本语言，简单易用，功能强大。能跨平台和可移植性好的一种脚本语言。</p>

<p>Mac系统自带<code class="highlighter-rouge">ruby</code>，但是使用系统<code class="highlighter-rouge">ruby</code>的时候，会出现各种各样的问题，包括没有权限<code class="highlighter-rouge">You don't have write permissions for the /Library/Ruby/Gems/xxx</code>等等，所以还是给系统再安装一个自定义的<code class="highlighter-rouge">ruby</code>使用起来更方便一点。  <code class="highlighter-rouge">rvm</code>和<code class="highlighter-rouge">rbenv</code>都是多版本 <code class="highlighter-rouge">ruby</code> 管理工具。 <code class="highlighter-rouge">rvm</code> 的设计理念是自动化，全面。 <code class="highlighter-rouge">rbenv</code> 的设计理念是规范化，小核。</p>

<h4 id="21-使用rvm安装ruby">2.1 使用RVM安装Ruby</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.安装RVM
$ curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable

2.查询已安装的ruby版本
$ rvm list 

3.查看可以安装的ruby版本
$ rvm list known

4.安装指定的版本，例如2.6.0
$ rvm install 2.6.0

5.切换到指定ruby版本
$ rvm use 2.6.0

6.卸载移除指定ruby版本
$ rvm remove 2.2.2  

6.查看当前使用ruby版本
$ ruby -v 
</code></pre></div></div>

<h4 id="22-使用rbenv安装ruby">2.2 使用rbenv安装Ruby</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.安装rbenv
$ brew install rbenv

2.配置一下环境变量然后把下面的代码放到 ~/.zshrc 或者 ~/.bash_profile 里
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

3.查看可以安装的ruby版本
$ rbenv install --list

4.安装指定的版本，例如2.6.0
$ rbenv install 2.6.0

5.查看所有已经安装ruby版本
$ rbenv versions

6.设置版本。全局(global)，本地(local)，当前终端(shell)。
查找版本的优先级是 当前终端 &gt; 本地 &gt; 全局。全局版本是在没有找到“当前终端”或“本地”作用域的设置时执行
$ rbenv global 2.6.0  全局版本
$ rbenv local 2.6.0   本地版本
$ rbenv shell 2.6.0   终端版本
$ rbenv global system 系统版本

7.设置完毕后，可通过以下命令进行验证
$ which ruby    # ~/..rbenv/shims/ruby
$ rbenv version    # 2.5.1 (set by ~/.rbenv/version)
</code></pre></div></div>

<h4 id="23-ruby-gem命令">2.3 Ruby Gem命令</h4>

<p><code class="highlighter-rouge">Gem</code>是一个管理<code class="highlighter-rouge">ruby</code>库和程序的标准包，<code class="highlighter-rouge">ruby1.9.2</code>版本后已默认已安装<code class="highlighter-rouge">Ruby Gem</code>。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gem -v # 查看 gem 版本
$ gem source # 查看 gem 配置源
$ gem source -l # 查看 gem 配置源目录
$ gem sources -a url # 添加 gem 配置源（url 需换成网址）
$ gem sources --add url # 添加 gem 配置源（url 需换成网址）
$ gem sources -r url # 删除 gem 配置源（url 需换成网址）
$ gem sources --remove url # 删除 gem 配置源（url 需换成网址）
$ gem update # 更新 所有包
$ gem update --system # 更新 Ruby Gems 软件
</code></pre></div></div>
<h3 id="三配置node环境">三、配置Node环境</h3>
<p>Mac上配置多个node环境可以使用nvm版本工具来管理。</p>

<h4 id="31-检查本地环境">3.1 检查本地环境</h4>
<p>执行<code class="highlighter-rouge">node -v</code>命令查看本地是否已经安装过node，如果之前已经使用homebrew安装过node，最好先进行卸载，然后再安装nvm</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>卸载node
$ brew uninstall node

删除node遗留文件
$ sudo rm /usr/local/bin/npm
$ sudo rm /usr/local/share/man/man1/node.1
$ sudo rm /usr/local/lib/dtrace/node.d
$ sudo rm -rf ~/.npm
$ sudo rm -rf ~/.node-gyp
$ sudo rm /opt/local/bin/node
$ sudo rm /opt/local/include/node
$ sudo rm -rf /opt/local/lib/node_modules
</code></pre></div></div>
<h4 id="32-nvm的安装及使用">3.2 nvm的安装及使用</h4>

<h5 id="321-安装nvm">3.2.1 安装nvm</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>安装nvm
$ brew install nvm

安装完查看用户目录下面有没有`.nvm`文件夹，没有则需要创建
$ mkdir ~/.nvm

查看是否安装成功
$ nvm --version

如果出现`command not found: nvm`那么需要配置一下环境变量
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] &amp;&amp; . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] &amp;&amp; . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

完成之后刷新一下`.zshrc`或者`.bash_profile`文件
source ~/.zshrc
source ~/.bash_profil
</code></pre></div></div>
<h5 id="322-nvm常用命令">3.2.2 nvm常用命令</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>安装最新稳定版 node
$ nvm install stable

安装指定版本
$ nvm install &lt;version&gt;

删除指定的版本
$ nvm uninstall &lt;version&gt;

列出所有已安装的版本
$ nvm ls

切换指定的版本
$ nvm use &lt;version&gt;

显示当前使用的版本
$ nvm current
</code></pre></div></div>

<h3 id="四配置cocoapods环境">四、配置CocoaPods环境</h3>

<p><code class="highlighter-rouge">CocoaPods</code>可以用来方便的统一管理这些第三方库，<code class="highlighter-rouge">CocoaPods</code> 安装依赖于<code class="highlighter-rouge">Ruby</code>环境，必须先配置<code class="highlighter-rouge">Ruby</code>环境。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>使用 ruby 的 gem 命令即可下载安装
$ sudo gem install cocoapods

安装完成后，执行setup指令，CocoaPods 将信息下载到~/.cocoapods/repos 目录下
如果安装 CocoaPods 时不执行此命令，在初次执行 pod intall 命令时，系统也会自动执行该指令
$ pod setup

如果你的gem太老，可能也会有问题，可以尝试用如下命令升级 gem
$ gem update --system

set up命令执行过慢，可以替换ruby的源，执行命令如下
$ gem sources --remove https://rubygems.org/
$ gem sources -a https://gems.ruby-china.com/
$ gem sources -l

创建Podfile文件，并保存
$ pod spec create your_pod_spec_nam

编辑Podfile文件后，执行pod install命令
$ pod install

查找第三方库
$ pod search

Podfile文件，引入私有的pods, 需添加source路径
source 'https://github.com/cocoaPods/Specs.git'  #官方仓库的地址
source '私有库的source地址'   #我们自己的私有spec仓库的地址
platform: ios, '9.0'
  pod '私有库'
end

使用git多人开发 Podfile.lock 冲突问题
多人开发需要将cocoapods版本保持统一，能够避免以上问题
$ sudo gem uninstall -n /usr/local/bin cocoapods -v XXX （XXX是你本机pod版本号）先删除旧版本号
$ sudo gem install -n /usr/local/bin cocoapods -v YYY （YYY是要用的统一pod版本号）下载统一版本
</code></pre></div></div>

:ET